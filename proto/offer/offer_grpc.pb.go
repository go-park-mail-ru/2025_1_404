// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: offer.proto

package offerpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OfferService_GetOfferById_FullMethodName     = "/offerService.OfferService/GetOfferById"
	OfferService_GetOffersByZhkId_FullMethodName = "/offerService.OfferService/GetOffersByZhkId"
)

// OfferServiceClient is the client API for OfferService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OfferServiceClient interface {
	GetOfferById(ctx context.Context, in *GetOfferRequest, opts ...grpc.CallOption) (*GetOfferResponse, error)
	GetOffersByZhkId(ctx context.Context, in *GetOffersByZhkRequest, opts ...grpc.CallOption) (*GetOffersByZhkResponse, error)
}

type offerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOfferServiceClient(cc grpc.ClientConnInterface) OfferServiceClient {
	return &offerServiceClient{cc}
}

func (c *offerServiceClient) GetOfferById(ctx context.Context, in *GetOfferRequest, opts ...grpc.CallOption) (*GetOfferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOfferResponse)
	err := c.cc.Invoke(ctx, OfferService_GetOfferById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offerServiceClient) GetOffersByZhkId(ctx context.Context, in *GetOffersByZhkRequest, opts ...grpc.CallOption) (*GetOffersByZhkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOffersByZhkResponse)
	err := c.cc.Invoke(ctx, OfferService_GetOffersByZhkId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OfferServiceServer is the server API for OfferService service.
// All implementations must embed UnimplementedOfferServiceServer
// for forward compatibility.
type OfferServiceServer interface {
	GetOfferById(context.Context, *GetOfferRequest) (*GetOfferResponse, error)
	GetOffersByZhkId(context.Context, *GetOffersByZhkRequest) (*GetOffersByZhkResponse, error)
	mustEmbedUnimplementedOfferServiceServer()
}

// UnimplementedOfferServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOfferServiceServer struct{}

func (UnimplementedOfferServiceServer) GetOfferById(context.Context, *GetOfferRequest) (*GetOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOfferById not implemented")
}
func (UnimplementedOfferServiceServer) GetOffersByZhkId(context.Context, *GetOffersByZhkRequest) (*GetOffersByZhkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOffersByZhkId not implemented")
}
func (UnimplementedOfferServiceServer) mustEmbedUnimplementedOfferServiceServer() {}
func (UnimplementedOfferServiceServer) testEmbeddedByValue()                      {}

// UnsafeOfferServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OfferServiceServer will
// result in compilation errors.
type UnsafeOfferServiceServer interface {
	mustEmbedUnimplementedOfferServiceServer()
}

func RegisterOfferServiceServer(s grpc.ServiceRegistrar, srv OfferServiceServer) {
	// If the following call pancis, it indicates UnimplementedOfferServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OfferService_ServiceDesc, srv)
}

func _OfferService_GetOfferById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfferServiceServer).GetOfferById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OfferService_GetOfferById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfferServiceServer).GetOfferById(ctx, req.(*GetOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfferService_GetOffersByZhkId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOffersByZhkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfferServiceServer).GetOffersByZhkId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OfferService_GetOffersByZhkId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfferServiceServer).GetOffersByZhkId(ctx, req.(*GetOffersByZhkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OfferService_ServiceDesc is the grpc.ServiceDesc for OfferService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OfferService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "offerService.OfferService",
	HandlerType: (*OfferServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOfferById",
			Handler:    _OfferService_GetOfferById_Handler,
		},
		{
			MethodName: "GetOffersByZhkId",
			Handler:    _OfferService_GetOffersByZhkId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "offer.proto",
}
